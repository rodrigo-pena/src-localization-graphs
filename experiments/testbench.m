%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Rodrigo Pena, rodrigo.pena@epfl.ch
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Testbench to experiment with the parameters of our problem.

%% Setup
verbose = 2; % Level of information display

%% Create graph
N = 250; % Number of nodes

gparam.distribute = 1;
gparam.nnparam.k = 6;
G = gsp_sensor(N, gparam);

G = gsp_create_laplacian(G, 'normalized');
G = gsp_compute_fourier_basis(G);

%% Initialization
kernel = struct('g', @(e, t) exp(-t.*e));

% To reproduce the distance vs theta figure:
param = struct( 'n_test', 32, ...
    'thetas', 1:5:50, ...
    'n_spikes', 2, ...
    'distances', 1:8, ...
    'snrs', Inf, ...
    'lambdas', 0.1, ...
    'alphas', 10, ...
    'betas', 0, ...
    'n_obs', G.N, ...
    'TOL', 1e-8, ...
    'MAX_ITER', 150, ...
    'MAX_ITER_x', 200, ...
    'TOL_x', 1e-5, ...
    'MAX_ITER_t', 0, ...
    'TOL_t', 1e-5, ...
    'constraint_x', @(x) x, ...
    'constraint_t', @(t) t, ...
    'method', 'smooth-newton');

% To reproduce the SNR1e vs theta figure:
% param = struct( 'n_test', 32, ...
%     'thetas', 1:5:50, ...
%     'n_spikes', 2, ...
%     'distances', 6, ...
%     'snrs', [40, 20, 10, 2], ...
%     'lambdas', 0.1, ...
%     'alphas', 10, ...
%     'betas', 0, ...
%     'n_obs', G.N, ...
%     'TOL', 1e-8, ...
%     'MAX_ITER', 150, ...
%     'MAX_ITER_x', 200, ...
%     'TOL_x', 1e-5, ...
%     'MAX_ITER_t', 0, ...
%     'TOL_t', 1e-5, ...
%     'constraint_x', @(x) x, ...
%     'constraint_t', @(t) t, ...
%     'method', 'smooth-newton');

%% Run test
tic;
[errors, dim_strings] = accuracy_testbench(G, kernel, param);
finish = toc;

% Display info
if verbose > 0
    fprintf('Elapsed time: %1.4f s\n', finish);
end

%% Plot figure
tmp = errors;
tmp(tmp == Inf) = NaN;
mean_errors = nanmean(tmp);
mean_errors = squeeze(mean_errors);
std_errors = nanstd(tmp);
std_errors = squeeze(std_errors);

if verbose > 1
    figure;
    xvec = param.(dim_strings{2});
    yvec = param.(dim_strings{3});
    x = repmat(xvec, [length(yvec), 1])';
    y = repmat((yvec)', [1, length(xvec)])';
    plot3_errorbars_surf(x, y, mean_errors, std_errors);
end